import { useParams } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import API from '../../api/axios.js';
import dayjs from 'dayjs';
import {
    Typography, Spin, Alert, Image, Tag, Modal, Button, Form, Select, Input, Space, message, AutoComplete
} from 'antd';
import CommentsSection from "../../components/CommentsSection.jsx";
import ArticleForm from "../../components/ArticleForm.jsx";
import { useSession } from "../../context/SessionProvider.jsx";
import { useState, useEffect } from "react";
import DeleteArticleButton from "../../components/DeleteArticleButton.jsx";

const { Title, Paragraph, Text } = Typography;

function AuctionDetailPage() {
    const { id } = useParams();
    const { session } = useSession();
    const [editOpen, setEditOpen] = useState(false);
    const [winnerOpen, setWinnerOpen] = useState(false);
    const [winnerInput, setWinnerInput] = useState('');
    const [users, setUsers] = useState([]);
    const [form] = Form.useForm();
    const isAdmin = session?.user?.role === 1;

    const { data, isLoading, isError, refetch } = useQuery({
        queryKey: ['auction', id],
        queryFn: () => API.get(`/auctions/${id}`).then(res => res.data),
        enabled: !!id,
    });

    useEffect(() => {
        if (!winnerOpen) return;
        fetchUsers();

        if (data?.winner_label) {
            setWinnerInput(data.winner_label);
        }
    }, [winnerOpen]);


    const fetchUsers = async () => {
        try {
            const res = await API.get('/users');
            setUsers(res.data.data || []);
        } catch {
            message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
        }
    };
    const userOptions = users.map(u => ({
        value: `${u.firstName} ${u.lastName} (@${u.username}) [ID: ${u.id}]`,
        userId: u.id,
        label: `${u.firstName} ${u.lastName}`
    }));
    const handleAssignWinner = async () => {
        const selectedUser = userOptions.find(opt => opt.value === winnerInput);

        const payload = selectedUser
            ? { userId: selectedUser.userId, label: selectedUser.label }
            : { label: winnerInput };

        try {
            await API.patch(`/auctions/${id}/winner`, payload);
            message.success('–ü–µ—Ä–µ–º–æ–∂—Ü—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ');
            setWinnerOpen(false);
            refetch();
        } catch (err) {
            message.error(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞');
        }
    };
    if (isLoading) return <Spin />;
    if (isError) return <Alert message="–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω" type="error" showIcon />;
    if (!data) return <Alert message="–ê—É–∫—Ü—ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" type="warning" showIcon />;

    const status = data.status ? '–í—ñ–¥–∫—Ä–∏—Ç–∏–π' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π';

    return (
        <div>
            {isAdmin && (
                <>
                    <Space style={{ marginTop: 24, marginBottom: 16 }}>
                        <Button type="primary" onClick={() => setEditOpen(true)}>
                            –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω
                        </Button>
                        <Button onClick={() => setWinnerOpen(true)}>
                            –û–±—Ä–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è
                        </Button>
                        <DeleteArticleButton articleId={id} type="auctions" />
                    </Space>
                </>
            )}

            <Modal
                title="–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞—É–∫—Ü—ñ–æ–Ω—É"
                open={editOpen}
                onCancel={() => setEditOpen(false)}
                footer={null}
                destroyOnClose
            >
                <ArticleForm
                    type="auctions"
                    mode="edit"
                    articleId={data.id}
                    initialData={data}
                    active={editOpen}
                    onSuccess={() => {
                        setEditOpen(false);
                        refetch();
                    }}
                />
            </Modal>

            <Modal
                title="–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è"
                open={winnerOpen}
                onCancel={() => setWinnerOpen(false)}
                onOk={handleAssignWinner}
                okText="–ó–±–µ—Ä–µ–≥—Ç–∏"
                cancelText="–°–∫–∞—Å—É–≤–∞—Ç–∏"
                destroyOnClose
            >
                <Typography.Paragraph>
                    –û–±–µ—Ä—ñ—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —ñ–º º—è –≤—Ä—É—á–Ω—É:
                </Typography.Paragraph>

                <AutoComplete
                    style={{ width: '100%' }}
                    value={winnerInput}
                    options={userOptions}
                    onChange={setWinnerInput}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–º º—è –ø–µ—Ä–µ–º–æ–∂—Ü—è"
                    filterOption={(inputValue, option) =>
                        option?.value?.toLowerCase().includes(inputValue.toLowerCase())
                    }
                />
            </Modal>


            <Title>{data.title}</Title>

            {data.img_path && (
                <Image
                    src={data.img_path}
                    alt={data.alt_text || 'Auction image'}
                    style={{ margin: '20px 0', maxHeight: 400, objectFit: 'cover' }}
                />
            )}

            <Paragraph>{data.body}</Paragraph>

            <Paragraph>
                üéÅ –ü—Ä–∏–∑: <Text strong>{data.prize}</Text>
            </Paragraph>

            <Paragraph>
                üïí –ó–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è: <Text>{dayjs(data.ends_at).format('DD.MM.YYYY HH:mm')}</Text>
            </Paragraph>

            <Paragraph>
                üìå –°—Ç–∞—Ç—É—Å: <Tag color={data.status ? 'green' : 'red'}>{status}</Tag>
            </Paragraph>

            {data.winner_label && (
                <Paragraph>
                    üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: <Text strong>{data.winner_label}</Text>
                </Paragraph>
            )}

            <CommentsSection entityType="auction" entityId={id} />
        </div>
    );
}

export default AuctionDetailPage;
